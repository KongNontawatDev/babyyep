"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/nuka-carousel";
exports.ids = ["vendor-chunks/nuka-carousel"];
exports.modules = {

/***/ "(ssr)/./node_modules/nuka-carousel/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/nuka-carousel/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Alignment: () => (/* binding */ Alignment),\n/* harmony export */   Directions: () => (/* binding */ Directions),\n/* harmony export */   NextButton: () => (/* binding */ NextButton),\n/* harmony export */   PagingDots: () => (/* binding */ PagingDots),\n/* harmony export */   Positions: () => (/* binding */ Positions),\n/* harmony export */   PreviousButton: () => (/* binding */ PreviousButton),\n/* harmony export */   ScrollMode: () => (/* binding */ ScrollMode),\n/* harmony export */   \"default\": () => (/* binding */ Carousel)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __pow = Math.pow;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\n\n// src/carousel.tsx\n\n\n// src/slide.tsx\n\n\n// src/hooks/use-slide-intersection-observer.ts\n\nvar useSlideIntersectionObserver = (elementRef, rootRef, callback) => {\n  const [entry, setEntry] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)();\n  const callbackRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(callback);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    const node = elementRef == null ? void 0 : elementRef.current;\n    const root = rootRef == null ? void 0 : rootRef.current;\n    if (!window.IntersectionObserver || !node || !root)\n      return;\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry2) => {\n          setEntry(entry2);\n          callbackRef.current(entry2);\n        });\n      },\n      {\n        threshold: [0.05, 0.95],\n        root\n      }\n    );\n    observer.observe(node);\n    return () => observer.disconnect();\n  }, [elementRef, rootRef]);\n  return entry;\n};\n\n// src/slide.tsx\n\nvar getSlideWidth = (count, wrapAround) => `${wrapAround ? 100 / (3 * count) : 100 / count}%`;\nvar getSlideStyles = (count, isCurrentSlide, isVisibleSlide, wrapAround, cellSpacing, animation, speed, zoomScale, adaptiveHeight, initializedAdaptiveHeight, slideWidth) => {\n  const width = slideWidth != null ? slideWidth : getSlideWidth(count, wrapAround);\n  const visibleSlideOpacity = isVisibleSlide ? 1 : 0;\n  const animationSpeed = animation === \"fade\" ? 200 : 500;\n  let height = \"auto\";\n  if (adaptiveHeight) {\n    if (initializedAdaptiveHeight) {\n      height = \"100%\";\n    } else if (isVisibleSlide) {\n      height = \"auto\";\n    } else {\n      height = \"0\";\n    }\n  }\n  return {\n    width,\n    height,\n    padding: `0 ${cellSpacing ? cellSpacing / 2 : 0}px`,\n    transition: animation ? `${speed || animationSpeed}ms ease 0s` : void 0,\n    transform: animation === \"zoom\" ? `scale(${isCurrentSlide && isVisibleSlide ? 1 : zoomScale || 0.85})` : void 0,\n    opacity: animation === \"fade\" ? visibleSlideOpacity : 1\n  };\n};\nvar generateIndex = (index, count, typeOfSlide) => {\n  if (typeOfSlide === \"prev-cloned\") {\n    return index - count;\n  }\n  if (typeOfSlide === \"next-cloned\") {\n    return index + count;\n  }\n  return index;\n};\nvar Slide = ({\n  count,\n  children,\n  index,\n  isCurrentSlide,\n  typeOfSlide,\n  wrapAround,\n  cellSpacing,\n  slideWidth,\n  animation,\n  speed,\n  zoomScale,\n  onVisibleSlideHeightChange,\n  adaptiveHeight,\n  initializedAdaptiveHeight,\n  updateIOEntry,\n  id,\n  carouselRef,\n  carouselId,\n  tabbed\n}) => {\n  var _a;\n  const customIndex = wrapAround ? generateIndex(index, count, typeOfSlide) : index;\n  const slideRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const entry = useSlideIntersectionObserver(slideRef, carouselRef, (entry2) => {\n    updateIOEntry(id, (entry2 == null ? void 0 : entry2.intersectionRatio) >= 0.95);\n  });\n  const isVisible = !!(entry == null ? void 0 : entry.isIntersecting);\n  const isFullyVisible = ((_a = entry == null ? void 0 : entry.intersectionRatio) != null ? _a : 1) >= 0.95;\n  const prevIsVisibleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var _a2;\n    const node = slideRef.current;\n    if (node) {\n      const slideHeight = (_a2 = node.getBoundingClientRect()) == null ? void 0 : _a2.height;\n      const prevIsVisible = prevIsVisibleRef.current;\n      if (isVisible && !prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, slideHeight);\n      } else if (!isVisible && prevIsVisible) {\n        onVisibleSlideHeightChange(customIndex, null);\n      }\n      prevIsVisibleRef.current = isVisible;\n    }\n  }, [customIndex, isVisible, onVisibleSlideHeightChange]);\n  const currentSlideClass = isCurrentSlide && isFullyVisible ? \" slide-current\" : \"\";\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"div\",\n    __spreadProps(__spreadValues({\n      ref: slideRef\n    }, { inert: isFullyVisible ? void 0 : \"true\" }), {\n      className: `slide${currentSlideClass}${typeOfSlide ? ` ${typeOfSlide}` : \"\"}${isFullyVisible ? \" slide-visible\" : \"\"}`,\n      style: getSlideStyles(\n        count,\n        isCurrentSlide,\n        isFullyVisible,\n        wrapAround,\n        cellSpacing,\n        animation,\n        speed,\n        zoomScale,\n        adaptiveHeight,\n        initializedAdaptiveHeight,\n        slideWidth\n      ),\n      id: typeOfSlide ? void 0 : `${carouselId}-slide-${index + 1}`,\n      role: tabbed ? \"tabpanel\" : \"group\",\n      \"aria-roledescription\": tabbed ? void 0 : \"slide\",\n      children\n    })\n  );\n};\nvar slide_default = Slide;\n\n// src/announce-slide.tsx\n\nvar styles = {\n  position: \"absolute\",\n  width: \"1px\",\n  height: \"1px\",\n  overflow: \"hidden\",\n  padding: 0,\n  margin: \"-1px\",\n  clip: \"rect(0, 0, 0, 0)\",\n  whiteSpace: \"nowrap\",\n  border: 0\n};\nvar AnnounceSlide = ({\n  message,\n  ariaLive = \"polite\"\n}) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", { \"aria-live\": ariaLive, \"aria-atomic\": \"true\", style: styles, tabIndex: -1, children: message });\nvar defaultRenderAnnounceSlideMessage = ({\n  currentSlide,\n  count\n}) => `Slide ${currentSlide + 1} of ${count}`;\nvar announce_slide_default = AnnounceSlide;\n\n// src/slider-list.tsx\n\n\n// src/default-controls.tsx\n\n\n// src/types.ts\nvar Alignment = /* @__PURE__ */ ((Alignment2) => {\n  Alignment2[\"Center\"] = \"center\";\n  Alignment2[\"Right\"] = \"right\";\n  Alignment2[\"Left\"] = \"left\";\n  return Alignment2;\n})(Alignment || {});\nvar Directions = /* @__PURE__ */ ((Directions2) => {\n  Directions2[\"Next\"] = \"next\";\n  Directions2[\"Prev\"] = \"prev\";\n  Directions2[\"Up\"] = \"up\";\n  Directions2[\"Down\"] = \"down\";\n  return Directions2;\n})(Directions || {});\nvar Positions = /* @__PURE__ */ ((Positions2) => {\n  Positions2[\"TopLeft\"] = \"TopLeft\";\n  Positions2[\"TopCenter\"] = \"TopCenter\";\n  Positions2[\"TopRight\"] = \"TopRight\";\n  Positions2[\"CenterLeft\"] = \"CenterLeft\";\n  Positions2[\"CenterCenter\"] = \"CenterCenter\";\n  Positions2[\"CenterRight\"] = \"CenterRight\";\n  Positions2[\"BottomLeft\"] = \"BottomLeft\";\n  Positions2[\"BottomCenter\"] = \"BottomCenter\";\n  Positions2[\"BottomRight\"] = \"BottomRight\";\n  return Positions2;\n})(Positions || {});\nvar ScrollMode = /* @__PURE__ */ ((ScrollMode2) => {\n  ScrollMode2[\"page\"] = \"page\";\n  ScrollMode2[\"remainder\"] = \"remainder\";\n  return ScrollMode2;\n})(ScrollMode || {});\n\n// src/utils.ts\nvar getNextMoveIndex = (scrollMode, wrapAround, currentSlide, slideCount, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide + slidesToScroll;\n  }\n  if (currentSlide >= slideCount - 1 || cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return currentSlide;\n  }\n  if (scrollMode === \"remainder\" /* remainder */ && cellAlign === \"left\") {\n    return Math.min(currentSlide + slidesToScroll, slideCount - slidesToShow);\n  }\n  return Math.min(currentSlide + slidesToScroll, slideCount - 1);\n};\nvar getPrevMoveIndex = (scrollMode, wrapAround, currentSlide, slidesToScroll, slidesToShow, cellAlign) => {\n  if (wrapAround) {\n    return currentSlide - slidesToScroll;\n  }\n  if (currentSlide <= 0 || cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return currentSlide;\n  }\n  if (scrollMode === \"remainder\" /* remainder */ && cellAlign === \"right\") {\n    return Math.max(currentSlide - slidesToScroll, slidesToShow - 1);\n  }\n  return Math.max(currentSlide - slidesToScroll, 0);\n};\nvar getDefaultSlideIndex = (slideIndex, slideCount, slidesToShow, slidesToScroll, cellAlign, autoplayReverse, scrollMode) => {\n  if (slideIndex !== void 0) {\n    return slideIndex;\n  }\n  const dotIndexes = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    scrollMode,\n    slidesToShow,\n    false,\n    cellAlign\n  );\n  return autoplayReverse ? dotIndexes[dotIndexes.length - 1] : dotIndexes[0];\n};\nvar getBoundedIndex = (rawIndex, slideCount) => {\n  return (rawIndex % slideCount + slideCount) % slideCount;\n};\n\n// src/default-controls.tsx\n\nvar defaultButtonStyles = (disabled) => ({\n  border: 0,\n  background: \"rgba(0,0,0,0.4)\",\n  color: \"white\",\n  padding: 10,\n  textTransform: \"uppercase\",\n  opacity: disabled ? 0.3 : 1,\n  cursor: disabled ? \"not-allowed\" : \"pointer\"\n});\nvar prevButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slidesToShow,\n  wrapAround\n}) => {\n  if (wrapAround) {\n    return false;\n  }\n  if (currentSlide === 0) {\n    return true;\n  }\n  if (cellAlign === \"right\" && currentSlide <= slidesToShow - 1) {\n    return true;\n  }\n  return false;\n};\nvar PreviousButton = ({\n  previousSlide,\n  defaultControlsConfig: {\n    prevButtonClassName,\n    prevButtonStyle = {},\n    prevButtonText,\n    prevButtonOnClick\n  },\n  onUserNavigation,\n  carouselId,\n  previousDisabled: disabled\n}) => {\n  const handleClick = (event) => {\n    prevButtonOnClick == null ? void 0 : prevButtonOnClick(event);\n    if (event.defaultPrevented)\n      return;\n    onUserNavigation(event);\n    event.preventDefault();\n    previousSlide();\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"button\",\n    {\n      className: prevButtonClassName,\n      style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), prevButtonStyle),\n      disabled,\n      onClick: handleClick,\n      \"aria-label\": \"previous\",\n      \"aria-controls\": `${carouselId}-slider-frame`,\n      type: \"button\",\n      children: prevButtonText || \"Prev\"\n    }\n  );\n};\nvar nextButtonDisabled = ({\n  cellAlign,\n  currentSlide,\n  slideCount,\n  slidesToShow,\n  wrapAround\n}) => {\n  if (wrapAround) {\n    return false;\n  }\n  if (currentSlide >= slideCount - 1) {\n    return true;\n  }\n  if (cellAlign === \"left\" && currentSlide >= slideCount - slidesToShow) {\n    return true;\n  }\n  return false;\n};\nvar NextButton = ({\n  nextSlide,\n  defaultControlsConfig: {\n    nextButtonClassName,\n    nextButtonStyle = {},\n    nextButtonText,\n    nextButtonOnClick\n  },\n  carouselId,\n  nextDisabled: disabled,\n  onUserNavigation\n}) => {\n  const handleClick = (event) => {\n    nextButtonOnClick == null ? void 0 : nextButtonOnClick(event);\n    if (event.defaultPrevented)\n      return;\n    onUserNavigation(event);\n    event.preventDefault();\n    nextSlide();\n  };\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"button\",\n    {\n      className: nextButtonClassName,\n      style: __spreadValues(__spreadValues({}, defaultButtonStyles(disabled)), nextButtonStyle),\n      disabled,\n      onClick: handleClick,\n      \"aria-label\": \"next\",\n      \"aria-controls\": `${carouselId}-slider-frame`,\n      type: \"button\",\n      children: nextButtonText || \"Next\"\n    }\n  );\n};\nvar getDotIndexes = (slideCount, slidesToScroll, scrollMode, slidesToShow, wrapAround, cellAlign) => {\n  const dotIndexes = [];\n  const scrollSlides = slidesToScroll <= 0 ? 1 : slidesToScroll;\n  if (wrapAround) {\n    for (let i = 0; i < slideCount; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"center\") {\n    for (let i = 0; i < slideCount - 1; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    if (slideCount > 0) {\n      dotIndexes.push(slideCount - 1);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"left\") {\n    if (slidesToShow >= slideCount) {\n      return [0];\n    }\n    const lastPossibleIndexWithoutWhitespace = slideCount - slidesToShow;\n    for (let i = 0; i < lastPossibleIndexWithoutWhitespace; i += scrollSlides) {\n      dotIndexes.push(i);\n    }\n    if (scrollMode === \"remainder\" /* remainder */) {\n      dotIndexes.push(lastPossibleIndexWithoutWhitespace);\n    } else {\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] + scrollSlides);\n    }\n    return dotIndexes;\n  }\n  if (cellAlign === \"right\") {\n    if (slidesToShow >= slideCount) {\n      return [slideCount - 1];\n    }\n    const firstPossibleIndexWithoutWhitespace = slidesToShow - 1;\n    if (scrollMode === \"remainder\" /* remainder */) {\n      for (let i = firstPossibleIndexWithoutWhitespace; i < slideCount - 1; i += scrollSlides) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(slideCount - 1);\n    } else {\n      for (let i = slideCount - 1; i > firstPossibleIndexWithoutWhitespace; i -= scrollSlides) {\n        dotIndexes.push(i);\n      }\n      dotIndexes.push(dotIndexes[dotIndexes.length - 1] - scrollSlides);\n      dotIndexes.reverse();\n    }\n    return dotIndexes;\n  }\n  return dotIndexes;\n};\nvar PagingDots = ({\n  pagingDotsIndices,\n  defaultControlsConfig: {\n    pagingDotsContainerClassName,\n    pagingDotsClassName,\n    pagingDotsStyle = {},\n    pagingDotsOnClick\n  },\n  carouselId,\n  currentSlide,\n  onUserNavigation,\n  slideCount,\n  goToSlide,\n  tabbed\n}) => {\n  const listStyles = {\n    position: \"relative\",\n    top: -10,\n    display: \"flex\",\n    margin: 0,\n    padding: 0,\n    listStyleType: \"none\"\n  };\n  const getButtonStyles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (active) => ({\n      cursor: \"pointer\",\n      opacity: active ? 1 : 0.5,\n      background: \"transparent\",\n      border: \"none\",\n      fill: \"black\"\n    }),\n    []\n  );\n  const currentSlideBounded = getBoundedIndex(currentSlide, slideCount);\n  if (!tabbed)\n    return null;\n  return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n    \"div\",\n    {\n      className: pagingDotsContainerClassName,\n      style: listStyles,\n      role: \"tablist\",\n      \"aria-label\": \"Choose slide to display.\",\n      children: pagingDotsIndices.map((slideIndex, i) => {\n        const isActive = currentSlideBounded === slideIndex || // sets navigation dots active if the current slide falls in the current index range\n        currentSlideBounded < slideIndex && (i === 0 || currentSlideBounded > pagingDotsIndices[i - 1]);\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          \"button\",\n          {\n            className: [\n              \"paging-item\",\n              pagingDotsClassName,\n              isActive ? \"active\" : null\n            ].join(\" \"),\n            type: \"button\",\n            style: __spreadValues(__spreadValues({}, getButtonStyles(isActive)), pagingDotsStyle),\n            onClick: (event) => {\n              pagingDotsOnClick == null ? void 0 : pagingDotsOnClick(event);\n              if (event.defaultPrevented)\n                return;\n              onUserNavigation(event);\n              goToSlide(slideIndex);\n            },\n            \"aria-label\": `slide ${slideIndex + 1}`,\n            \"aria-selected\": isActive,\n            \"aria-controls\": `${carouselId}-slide-${slideIndex + 1}`,\n            role: \"tab\",\n            children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n              \"svg\",\n              {\n                className: \"paging-dot\",\n                width: \"6\",\n                height: \"6\",\n                \"aria-hidden\": \"true\",\n                focusable: \"false\",\n                viewBox: \"0 0 6 6\",\n                children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"circle\", { cx: \"3\", cy: \"3\", r: \"3\" })\n              }\n            )\n          },\n          slideIndex\n        );\n      })\n    }\n  );\n};\n\n// src/hooks/use-tween.ts\n\nvar useTween = (durationMs, easingFunction, navigationNum, shouldInterrupt) => {\n  const [normalizedTimeRaw, setNormalizedTime] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n  const startTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(Date.now());\n  const rAF = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n  const isFirstRender = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n  const lastNavigationNum = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const normalizedTime = lastNavigationNum.current === null || lastNavigationNum.current === navigationNum || shouldInterrupt ? normalizedTimeRaw : 0;\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    lastNavigationNum.current = navigationNum;\n    if (isFirstRender.current) {\n      isFirstRender.current = false;\n      return;\n    }\n    if (shouldInterrupt) {\n      return;\n    }\n    startTime.current = Date.now();\n    setNormalizedTime(0);\n    const tick = () => {\n      rAF.current = requestAnimationFrame(() => {\n        const currentTime = Date.now();\n        const normalizedTime2 = Math.min(\n          1,\n          (currentTime - startTime.current) / durationMs\n        );\n        setNormalizedTime(normalizedTime2);\n        if (normalizedTime2 < 1) {\n          tick();\n        } else {\n          rAF.current = void 0;\n        }\n      });\n    };\n    tick();\n    return () => {\n      if (rAF.current !== void 0) {\n        cancelAnimationFrame(rAF.current);\n        setNormalizedTime(1);\n      }\n    };\n  }, [navigationNum, durationMs, shouldInterrupt]);\n  return {\n    isAnimating: normalizedTime !== 1,\n    value: easingFunction(normalizedTime)\n  };\n};\n\n// src/slider-list.tsx\n\nvar getPercentOffsetForSlide = (currentSlide, slideCount, slidesToShow, cellAlign, wrapAround) => {\n  const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n  const singleSlidePercentOfWhole = 100 / renderedSlideCount;\n  let slide0Offset = wrapAround ? -100 / 3 : 0;\n  if (cellAlign === \"right\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    slide0Offset += singleSlidePercentOfWhole * excessSlides;\n  }\n  if (cellAlign === \"center\" && slidesToShow > 1) {\n    const excessSlides = slidesToShow - 1;\n    const excessLeftSlides = excessSlides / 2;\n    slide0Offset += singleSlidePercentOfWhole * excessLeftSlides;\n  }\n  const currentSlideOffsetFrom0 = 100 / renderedSlideCount * currentSlide;\n  return slide0Offset - currentSlideOffsetFrom0;\n};\nvar SliderList = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  ({\n    animation,\n    animationDistance,\n    cellAlign,\n    children,\n    currentSlide,\n    disableAnimation,\n    disableEdgeSwiping,\n    draggedOffset,\n    easing,\n    edgeEasing,\n    isDragging,\n    scrollMode,\n    slideCount,\n    slidesToScroll,\n    slidesToShow,\n    speed,\n    wrapAround,\n    slideWidth,\n    setIsAnimating\n  }, forwardedRef) => {\n    const renderedSlideCount = wrapAround ? 3 * slideCount : slideCount;\n    const listVisibleWidth = slideWidth ? `calc(${slideWidth} * ${renderedSlideCount})` : `${renderedSlideCount * 100 / slidesToShow}%`;\n    const percentOffsetForSlideProps = [\n      slideCount,\n      slidesToShow,\n      cellAlign,\n      wrapAround\n    ];\n    const dotIndexes = getDotIndexes(\n      slideCount,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround,\n      cellAlign\n    );\n    let clampedDraggedOffset = `${draggedOffset}px`;\n    if (isDragging && disableEdgeSwiping && !wrapAround) {\n      const clampOffsets = [\n        dotIndexes[0],\n        dotIndexes[dotIndexes.length - 1]\n      ].map(\n        (index) => getPercentOffsetForSlide(index, ...percentOffsetForSlideProps)\n      );\n      clampedDraggedOffset = `clamp(${clampOffsets[1]}%, ${draggedOffset}px, ${clampOffsets[0]}%)`;\n    }\n    const slideBasedOffset = getPercentOffsetForSlide(\n      currentSlide,\n      ...percentOffsetForSlideProps\n    );\n    const isEdgeEasing = !disableEdgeSwiping && !wrapAround && (currentSlide === dotIndexes[0] && animationDistance < 0 || currentSlide === dotIndexes[dotIndexes.length - 1] && animationDistance > 0);\n    const { value: transition, isAnimating } = useTween(\n      speed,\n      !isEdgeEasing ? easing : edgeEasing,\n      // animationDistance is assumed to be unique enough that it can be used to\n      // detect when a new animation should start. This is used in addition to\n      // currentSlide because some animations, such as those with edgeEasing, do\n      // not occur due to a change in value of currentSlide\n      currentSlide + animationDistance,\n      isDragging || disableAnimation || animation === \"fade\"\n    );\n    let positioning;\n    if (isDragging || slideBasedOffset !== 0 || isAnimating) {\n      if (isDragging) {\n        positioning = `translateX(${clampedDraggedOffset})`;\n      } else {\n        const transitionOffset = isAnimating ? (1 - transition) * animationDistance : 0;\n        positioning = `translateX(calc(${slideBasedOffset}% - ${transitionOffset}px))`;\n      }\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      setIsAnimating(isAnimating);\n    }, [isAnimating, setIsAnimating]);\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"div\",\n      {\n        ref: forwardedRef,\n        className: \"slider-list\",\n        style: {\n          width: listVisibleWidth,\n          textAlign: \"left\",\n          userSelect: \"auto\",\n          transform: positioning,\n          display: \"flex\"\n        },\n        children\n      }\n    );\n  }\n);\nSliderList.displayName = \"SliderList\";\n\n// src/controls.tsx\n\n\n// src/control-styles.ts\nvar commonStyles = {\n  position: \"absolute\",\n  display: \"flex\",\n  zIndex: 1,\n  top: 0,\n  left: 0,\n  bottom: 0,\n  right: 0\n};\nvar getControlContainerFlexStyles = (pos) => {\n  let alignItems;\n  switch (pos) {\n    case \"TopLeft\" /* TopLeft */:\n    case \"TopCenter\" /* TopCenter */:\n    case \"TopRight\" /* TopRight */:\n      alignItems = \"flex-start\";\n      break;\n    case \"CenterLeft\" /* CenterLeft */:\n    case \"CenterCenter\" /* CenterCenter */:\n    case \"CenterRight\" /* CenterRight */:\n      alignItems = \"center\";\n      break;\n    case \"BottomLeft\" /* BottomLeft */:\n    case \"BottomCenter\" /* BottomCenter */:\n    case \"BottomRight\" /* BottomRight */:\n      alignItems = \"flex-end\";\n      break;\n  }\n  let justifyContent;\n  switch (pos) {\n    case \"TopLeft\" /* TopLeft */:\n    case \"CenterLeft\" /* CenterLeft */:\n    case \"BottomLeft\" /* BottomLeft */:\n      justifyContent = \"flex-start\";\n      break;\n    case \"TopCenter\" /* TopCenter */:\n    case \"CenterCenter\" /* CenterCenter */:\n    case \"BottomCenter\" /* BottomCenter */:\n      justifyContent = \"center\";\n      break;\n    case \"TopRight\" /* TopRight */:\n    case \"CenterRight\" /* CenterRight */:\n    case \"BottomRight\" /* BottomRight */:\n      justifyContent = \"flex-end\";\n      break;\n  }\n  return { alignItems, justifyContent };\n};\nvar getControlContainerStyles = (pos) => {\n  return __spreadValues(__spreadValues({}, getControlContainerFlexStyles(pos)), commonStyles);\n};\n\n// src/controls.tsx\n\nvar controlsMap = [\n  { funcName: \"renderTopLeftControls\", key: \"TopLeft\" /* TopLeft */ },\n  { funcName: \"renderTopCenterControls\", key: \"TopCenter\" /* TopCenter */ },\n  { funcName: \"renderTopRightControls\", key: \"TopRight\" /* TopRight */ },\n  { funcName: \"renderCenterLeftControls\", key: \"CenterLeft\" /* CenterLeft */ },\n  { funcName: \"renderCenterCenterControls\", key: \"CenterCenter\" /* CenterCenter */ },\n  { funcName: \"renderCenterRightControls\", key: \"CenterRight\" /* CenterRight */ },\n  { funcName: \"renderBottomLeftControls\", key: \"BottomLeft\" /* BottomLeft */ },\n  { funcName: \"renderBottomCenterControls\", key: \"BottomCenter\" /* BottomCenter */ },\n  { funcName: \"renderBottomRightControls\", key: \"BottomRight\" /* BottomRight */ }\n];\nvar renderControls = (props, slideCount, currentSlide, goToSlide, nextSlide, prevSlide, slidesToScroll) => {\n  if (props.withoutControls) {\n    return null;\n  }\n  const disableCheckProps = __spreadProps(__spreadValues({}, props), {\n    currentSlide,\n    slideCount\n  });\n  const nextDisabled = nextButtonDisabled(disableCheckProps);\n  const previousDisabled = prevButtonDisabled(disableCheckProps);\n  const pagingDotsIndices = getDotIndexes(\n    slideCount,\n    slidesToScroll,\n    props.scrollMode,\n    props.slidesToShow,\n    props.wrapAround,\n    props.cellAlign\n  );\n  return controlsMap.map((control) => {\n    var _a;\n    if (!props[control.funcName] || typeof props[control.funcName] !== \"function\") {\n      return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, {}, control.funcName);\n    }\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n      \"div\",\n      {\n        style: __spreadProps(__spreadValues({}, getControlContainerStyles(control.key)), {\n          pointerEvents: \"none\"\n        }),\n        children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          \"div\",\n          {\n            className: [\n              `slider-control-${control.key.toLowerCase()}`,\n              props.defaultControlsConfig.containerClassName || \"\"\n            ].join(\" \").trim(),\n            style: { pointerEvents: \"auto\" },\n            children: (_a = props[control.funcName]) == null ? void 0 : _a.call(props, {\n              cellAlign: props.cellAlign,\n              cellSpacing: props.cellSpacing,\n              currentSlide,\n              defaultControlsConfig: props.defaultControlsConfig || {},\n              carouselId: props.carouselId,\n              pagingDotsIndices,\n              goToSlide,\n              nextDisabled,\n              nextSlide,\n              onUserNavigation: props.onUserNavigation,\n              previousDisabled,\n              previousSlide: prevSlide,\n              scrollMode: props.scrollMode,\n              slideCount,\n              slidesToScroll,\n              slidesToShow: props.slidesToShow || 1,\n              tabbed: props.tabbed,\n              vertical: props.vertical,\n              wrapAround: props.wrapAround\n            })\n          }\n        )\n      },\n      control.funcName\n    );\n  });\n};\nvar controls_default = renderControls;\n\n// src/default-carousel-props.tsx\n\nvar easeOut = (t) => __pow(t - 1, 3) + 1;\nvar defaultProps = {\n  adaptiveHeight: false,\n  adaptiveHeightAnimation: true,\n  afterSlide: () => {\n  },\n  autoplay: false,\n  autoplayInterval: 3e3,\n  autoplayReverse: false,\n  beforeSlide: () => {\n  },\n  cellAlign: \"left\",\n  cellSpacing: 0,\n  defaultControlsConfig: {},\n  disableAnimation: false,\n  disableEdgeSwiping: false,\n  dragging: true,\n  dragThreshold: 0.5,\n  easing: easeOut,\n  edgeEasing: easeOut,\n  enableKeyboardControls: false,\n  frameAriaLabel: \"Slider\",\n  keyCodeConfig: {\n    nextSlide: [39, 68, 38, 87],\n    previousSlide: [37, 65, 40, 83],\n    firstSlide: [81],\n    lastSlide: [69],\n    pause: [32]\n  },\n  landmark: false,\n  onDragStart: () => {\n  },\n  onDrag: () => {\n  },\n  onDragEnd: () => {\n  },\n  onUserNavigation: () => {\n  },\n  pauseOnHover: true,\n  renderAnnounceSlideMessage: defaultRenderAnnounceSlideMessage,\n  renderBottomCenterControls: (props) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PagingDots, __spreadValues({}, props)),\n  renderCenterLeftControls: (props) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(PreviousButton, __spreadValues({}, props)),\n  renderCenterRightControls: (props) => /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(NextButton, __spreadValues({}, props)),\n  scrollMode: \"page\" /* page */,\n  slidesToScroll: 1,\n  slidesToShow: 1,\n  speed: 500,\n  style: {},\n  swiping: true,\n  tabbed: true,\n  vertical: false,\n  withoutControls: false,\n  wrapAround: false,\n  children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {})\n};\nvar default_carousel_props_default = defaultProps;\n\n// src/hooks/use-frame-height.ts\n\n\n// src/hooks/use-state-with-ref.ts\n\nvar useStateWithRef = (initialState) => {\n  const [value, setValue] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(initialState);\n  const valueRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(initialState);\n  const setValueAndRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((newValue) => {\n    valueRef.current = newValue;\n    setValue(newValue);\n  }, []);\n  return [value, setValueAndRef, valueRef];\n};\n\n// src/hooks/use-frame-height.ts\nvar useFrameHeight = (adaptiveHeight, slidesToShow, slideCount) => {\n  const [visibleHeights, setVisibleHeights, visibleHeightsRef] = useStateWithRef([]);\n  const [initializedAdaptiveHeight, setInitializedAdaptiveHeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n  const handleVisibleSlideHeightChange = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n    (slideIndex, height) => {\n      const latestVisibleHeights = visibleHeightsRef.current;\n      let newVisibleHeights;\n      if (height === null) {\n        newVisibleHeights = latestVisibleHeights.filter(\n          (slideHeight) => slideHeight.slideIndex !== slideIndex\n        );\n      } else {\n        newVisibleHeights = [...latestVisibleHeights, { slideIndex, height }];\n      }\n      setVisibleHeights(newVisibleHeights);\n      if (newVisibleHeights.length >= Math.min(slideCount, Math.ceil(slidesToShow))) {\n        setInitializedAdaptiveHeight(true);\n      }\n    },\n    [slideCount, setVisibleHeights, slidesToShow, visibleHeightsRef]\n  );\n  const frameHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(() => {\n    if (adaptiveHeight) {\n      if (!initializedAdaptiveHeight) {\n        return \"auto\";\n      }\n      const maxHeight = Math.max(\n        0,\n        ...visibleHeights.map((height) => height.height)\n      );\n      return `${maxHeight}px`;\n    } else {\n      return \"auto\";\n    }\n  }, [adaptiveHeight, initializedAdaptiveHeight, visibleHeights]);\n  return {\n    handleVisibleSlideHeightChange,\n    frameHeight,\n    initializedAdaptiveHeight\n  };\n};\n\n// src/hooks/use-forward-ref.ts\n\nvar useForwardRef = (ref) => {\n  const targetRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    if (!ref)\n      return;\n    if (typeof ref === \"function\") {\n      ref(targetRef.current);\n    } else {\n      ref.current = targetRef.current;\n    }\n  }, [ref]);\n  return targetRef;\n};\n\n// src/carousel.tsx\n\nvar Carousel = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(\n  (rawProps, ref) => {\n    const props = rawProps;\n    const internalCarouselId = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const {\n      adaptiveHeight,\n      adaptiveHeightAnimation,\n      afterSlide,\n      animation,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      beforeSlide,\n      carouselId = internalCarouselId,\n      cellAlign: propsCellAlign,\n      cellSpacing,\n      children,\n      className,\n      disableAnimation,\n      dragging: desktopDraggingEnabled,\n      dragThreshold: propsDragThreshold,\n      enableKeyboardControls,\n      frameAriaLabel,\n      keyCodeConfig,\n      landmark,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onUserNavigation,\n      pauseOnHover,\n      renderAnnounceSlideMessage,\n      scrollMode: propsScrollMode,\n      slideIndex,\n      slidesToScroll: propsSlidesToScroll,\n      slidesToShow: propsSlidesToShow,\n      slideWidth,\n      speed,\n      style,\n      swiping: mobileDraggingEnabled,\n      tabbed,\n      wrapAround,\n      zoomScale\n    } = props;\n    const filteredSlides = react__WEBPACK_IMPORTED_MODULE_0__.Children.toArray(children).filter(Boolean);\n    const slideCount = filteredSlides.length;\n    const cellAlign = slideWidth || propsSlidesToScroll === \"auto\" ? \"left\" : propsCellAlign;\n    const scrollMode = propsSlidesToScroll === \"auto\" ? \"remainder\" /* remainder */ : propsScrollMode;\n    const [slideIOEntries, setSlideIOEntries] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n      /* @__PURE__ */ new Map()\n    );\n    const visibleCount = Array.from(slideIOEntries).filter(\n      ([, visible]) => visible\n    ).length;\n    const [constantVisibleCount, setConstantVisibleCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(visibleCount);\n    const slidesToShow = slideWidth ? constantVisibleCount : propsSlidesToShow;\n    const slidesToScroll = animation === \"fade\" ? slidesToShow : propsSlidesToScroll === \"auto\" ? Math.max(constantVisibleCount, 1) : propsSlidesToScroll;\n    const [currentSlide, setCurrentSlide] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(\n      () => getDefaultSlideIndex(\n        slideIndex,\n        slideCount,\n        slidesToShow,\n        slidesToScroll,\n        cellAlign,\n        autoplayReverse,\n        scrollMode\n      )\n    );\n    const [pause, setPause] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [dragDistance, setDragDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [animationDistance, setAnimationDistance] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const updateSlideIOEntry = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (id, isFullyVisible) => {\n        if (!!slideIOEntries.get(id) === isFullyVisible)\n          return;\n        setSlideIOEntries((prev) => {\n          const newMap = new Map(prev);\n          newMap.set(id, isFullyVisible);\n          return newMap;\n        });\n      },\n      [slideIOEntries]\n    );\n    const prevDragged = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      if (isDragging)\n        prevDragged.current = true;\n      if (!(isDragging || isAnimating)) {\n        if (!prevDragged.current)\n          setConstantVisibleCount(visibleCount);\n        prevDragged.current = false;\n      }\n    }, [isAnimating, isDragging, visibleCount]);\n    const prevXPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const preDragOffset = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);\n    const sliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const defaultCarouselRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const autoplayTimeout = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const autoplayLastTriggeredRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(true);\n    const setSliderListRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((node) => {\n      if (node) {\n        node.querySelectorAll(\".slider-list img\").forEach((el) => el.setAttribute(\"draggable\", \"false\"));\n      }\n      sliderListRef.current = node;\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n    const forwardedRef = useForwardRef(ref);\n    const carouselRef = forwardedRef || defaultCarouselRef;\n    const goToSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (targetSlideUnbounded) => {\n        if (!sliderListRef.current || !carouselRef.current)\n          return;\n        const targetSlideBounded = getBoundedIndex(\n          targetSlideUnbounded,\n          slideCount\n        );\n        const slideChanged = targetSlideUnbounded !== currentSlide;\n        slideChanged && beforeSlide(currentSlide, targetSlideBounded);\n        const currentOffset = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        const sliderWidth = sliderListRef.current.offsetWidth;\n        let targetOffset = getPercentOffsetForSlide(\n          targetSlideBounded,\n          slideCount,\n          slidesToShow,\n          cellAlign,\n          wrapAround\n        ) / 100 * sliderWidth;\n        if (wrapAround) {\n          const slideSetWidth = sliderWidth / 3;\n          if (targetSlideUnbounded < 0) {\n            targetOffset += slideSetWidth;\n          }\n          if (targetSlideUnbounded >= slideCount) {\n            targetOffset -= slideSetWidth;\n          }\n        }\n        setAnimationDistance(targetOffset - currentOffset);\n        if (slideChanged) {\n          setCurrentSlide(targetSlideBounded);\n          const msToEndOfAnimation = !disableAnimation ? speed || 500 : 40;\n          setTimeout(() => {\n            if (!isMounted.current)\n              return;\n            afterSlide(targetSlideBounded);\n          }, msToEndOfAnimation);\n        }\n      },\n      [\n        afterSlide,\n        beforeSlide,\n        carouselRef,\n        cellAlign,\n        currentSlide,\n        disableAnimation,\n        speed,\n        slideCount,\n        slidesToShow,\n        wrapAround\n      ]\n    );\n    const nextSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      const nextSlideIndex = getNextMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slideCount,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n      if (currentSlide !== nextSlideIndex) {\n        goToSlide(nextSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slideCount,\n      slidesToShow,\n      wrapAround\n    ]);\n    const prevSlide = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      const prevSlideIndex = getPrevMoveIndex(\n        scrollMode,\n        wrapAround,\n        currentSlide,\n        slidesToScroll,\n        slidesToShow,\n        cellAlign\n      );\n      if (currentSlide !== prevSlideIndex) {\n        goToSlide(prevSlideIndex);\n      }\n    }, [\n      cellAlign,\n      currentSlide,\n      goToSlide,\n      slidesToScroll,\n      scrollMode,\n      slidesToShow,\n      wrapAround\n    ]);\n    const prevMovedToSlideIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(slideIndex);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      if (slideIndex !== void 0 && slideIndex !== prevMovedToSlideIndex.current && !autoplayReverse) {\n        goToSlide(slideIndex);\n        prevMovedToSlideIndex.current = slideIndex;\n      }\n    }, [slideIndex, autoplayReverse, goToSlide]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      let pauseStarted = null;\n      if (pause) {\n        pauseStarted = Date.now();\n      }\n      return () => {\n        if (pauseStarted !== null && autoplayLastTriggeredRef.current !== null) {\n          autoplayLastTriggeredRef.current += Date.now() - pauseStarted;\n        }\n      };\n    }, [pause]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n      if (autoplay && !pause) {\n        const adjustedTimeoutMs = autoplayLastTriggeredRef.current !== null ? autoplayInterval - (Date.now() - autoplayLastTriggeredRef.current) : autoplayInterval;\n        autoplayTimeout.current = setTimeout(() => {\n          autoplayLastTriggeredRef.current = Date.now();\n          if (autoplayReverse) {\n            prevSlide();\n          } else {\n            nextSlide();\n          }\n        }, adjustedTimeoutMs);\n      }\n      if (autoplay && pause) {\n        clearTimeout(autoplayTimeout.current);\n      }\n      return () => {\n        clearTimeout(autoplayTimeout.current);\n      };\n    }, [\n      pause,\n      autoplay,\n      autoplayInterval,\n      autoplayReverse,\n      prevSlide,\n      nextSlide\n    ]);\n    const onKeyDown = (event) => {\n      let keyCommand = null;\n      Object.keys(keyCodeConfig).forEach(\n        (command) => {\n          var _a;\n          if ((_a = keyCodeConfig[command]) == null ? void 0 : _a.includes(event.keyCode)) {\n            keyCommand = command;\n          }\n        }\n      );\n      if (keyCommand === null)\n        return;\n      event.preventDefault();\n      event.stopPropagation();\n      switch (keyCommand) {\n        case \"nextSlide\":\n          onUserNavigation(event);\n          nextSlide();\n          break;\n        case \"previousSlide\":\n          onUserNavigation(event);\n          prevSlide();\n          break;\n        case \"firstSlide\":\n        case \"lastSlide\": {\n          onUserNavigation(event);\n          const dotIndices = getDotIndexes(\n            slideCount,\n            slidesToScroll,\n            scrollMode,\n            slidesToShow,\n            wrapAround,\n            cellAlign\n          );\n          if (keyCommand === \"firstSlide\") {\n            goToSlide(dotIndices[0]);\n          } else {\n            goToSlide(dotIndices[dotIndices.length - 1]);\n          }\n          break;\n        }\n        case \"pause\":\n          setPause((p) => !p);\n          break;\n      }\n    };\n    const dragPositions = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([]);\n    const handleDragEnd = (e) => {\n      if (!isDragging || !carouselRef.current)\n        return;\n      setIsDragging(false);\n      let distanceFromInertia = 0;\n      if (dragPositions.current.length > 1) {\n        const startMove = dragPositions.current[0];\n        const endMove = dragPositions.current[dragPositions.current.length - 1];\n        const timeOffset = endMove.time - startMove.time;\n        const goodInertiaFeelConstant = 9;\n        const goodFrictionFeelConstant = 0.92;\n        const initialVelocity = goodInertiaFeelConstant * Math.abs((endMove.pos - startMove.pos) / timeOffset);\n        let velocity = initialVelocity;\n        while (Math.abs(velocity) > 1) {\n          distanceFromInertia += velocity;\n          velocity *= goodFrictionFeelConstant;\n        }\n      }\n      dragPositions.current = [];\n      const adjustedDragDistance = Math.abs(dragDistance) + Math.abs(distanceFromInertia);\n      onDragEnd(e);\n      prevXPosition.current = null;\n      setDragDistance(0);\n      const oneScrollWidth = carouselRef.current.offsetWidth * Math.min(1, slidesToScroll / slidesToShow);\n      const dragThreshold = oneScrollWidth * propsDragThreshold;\n      if (adjustedDragDistance < dragThreshold) {\n        goToSlide(currentSlide);\n        return;\n      }\n      const canMaintainVisualContinuity = slidesToShow >= 2 * slidesToScroll;\n      const timesToMove = canMaintainVisualContinuity ? 1 + Math.floor((adjustedDragDistance - dragThreshold) / oneScrollWidth) : 1;\n      let nextSlideIndex = currentSlide;\n      for (let index = 0; index < timesToMove; index += 1) {\n        if (dragDistance > 0) {\n          nextSlideIndex = getNextMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slideCount,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        } else {\n          nextSlideIndex = getPrevMoveIndex(\n            scrollMode,\n            wrapAround,\n            nextSlideIndex,\n            slidesToScroll,\n            slidesToShow,\n            cellAlign\n          );\n        }\n      }\n      if (nextSlideIndex !== currentSlide) {\n        onUserNavigation(e);\n      }\n      goToSlide(nextSlideIndex);\n    };\n    const onTouchStart = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!mobileDraggingEnabled || !sliderListRef.current || !carouselRef.current) {\n          return;\n        }\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n      },\n      [carouselRef, onDragStart, mobileDraggingEnabled]\n    );\n    const handlePointerMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (xPosition) => {\n        if (!isDragging)\n          return;\n        const isFirstMove = prevXPosition.current === null;\n        const delta = prevXPosition.current !== null ? xPosition - prevXPosition.current : 0;\n        const nextDragDistance = dragDistance + delta;\n        const now = Date.now();\n        while (dragPositions.current.length > 0) {\n          if (now - dragPositions.current[0].time <= 100) {\n            break;\n          }\n          dragPositions.current.shift();\n        }\n        dragPositions.current.push({ pos: nextDragDistance, time: now });\n        if (!isFirstMove) {\n          setDragDistance(nextDragDistance);\n        }\n        prevXPosition.current = xPosition;\n      },\n      [isDragging, dragDistance]\n    );\n    const onTouchMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!isDragging || !carouselRef.current)\n          return;\n        onDragStart(e);\n        const moveValue = carouselRef.current.offsetWidth - e.touches[0].pageX;\n        handlePointerMove(moveValue);\n      },\n      [isDragging, carouselRef, handlePointerMove, onDragStart]\n    );\n    const onMouseDown = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!desktopDraggingEnabled || !sliderListRef.current || !carouselRef.current)\n          return;\n        setIsDragging(true);\n        preDragOffset.current = sliderListRef.current.getBoundingClientRect().left - carouselRef.current.getBoundingClientRect().left;\n        onDragStart(e);\n      },\n      [carouselRef, desktopDraggingEnabled, onDragStart]\n    );\n    const onMouseMove = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(\n      (e) => {\n        if (!isDragging || !carouselRef.current)\n          return;\n        onDrag(e);\n        const offsetX = e.clientX - carouselRef.current.getBoundingClientRect().left;\n        const moveValue = carouselRef.current.offsetWidth - offsetX;\n        handlePointerMove(moveValue);\n      },\n      [carouselRef, isDragging, handlePointerMove, onDrag]\n    );\n    const onMouseUp = (e) => {\n      e.preventDefault();\n      handleDragEnd(e);\n    };\n    const onMouseEnter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      if (pauseOnHover) {\n        setPause(true);\n      }\n    }, [pauseOnHover]);\n    const onMouseLeave = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n      if (pauseOnHover) {\n        setPause(false);\n      }\n    }, [pauseOnHover]);\n    const {\n      frameHeight,\n      handleVisibleSlideHeightChange,\n      initializedAdaptiveHeight\n    } = useFrameHeight(adaptiveHeight, slidesToShow, slideCount);\n    const renderSlides = (typeOfSlide) => {\n      const slides = filteredSlides.map((child, index) => {\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n          slide_default,\n          {\n            id: `${typeOfSlide}-${index}`,\n            carouselId,\n            count: slideCount,\n            index,\n            isCurrentSlide: currentSlide === index,\n            typeOfSlide,\n            wrapAround,\n            cellSpacing,\n            animation,\n            speed,\n            zoomScale,\n            onVisibleSlideHeightChange: handleVisibleSlideHeightChange,\n            slideWidth,\n            updateIOEntry: updateSlideIOEntry,\n            adaptiveHeight,\n            initializedAdaptiveHeight,\n            carouselRef,\n            tabbed,\n            children: child\n          },\n          `${typeOfSlide}-${index}`\n        );\n      });\n      return slides;\n    };\n    return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n      \"div\",\n      {\n        className: \"slider-container\",\n        style: {\n          position: \"relative\"\n        },\n        onMouseEnter,\n        onMouseLeave,\n        \"aria-label\": frameAriaLabel,\n        role: landmark ? \"region\" : \"group\",\n        \"aria-roledescription\": \"carousel\",\n        id: carouselId,\n        \"data-testid\": carouselId,\n        children: [\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            announce_slide_default,\n            {\n              ariaLive: autoplay && !pause ? \"off\" : \"polite\",\n              message: renderAnnounceSlideMessage({\n                currentSlide,\n                count: slideCount\n              })\n            }\n          ),\n          controls_default(\n            __spreadProps(__spreadValues({}, props), { carouselId }),\n            slideCount,\n            currentSlide,\n            goToSlide,\n            nextSlide,\n            prevSlide,\n            slidesToScroll\n          ),\n          /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\n            \"div\",\n            {\n              className: [\"slider-frame\", className || \"\"].join(\" \").trim(),\n              style: __spreadValues({\n                overflow: \"hidden\",\n                width: \"100%\",\n                position: \"relative\",\n                outline: \"none\",\n                touchAction: \"pan-y\",\n                height: frameHeight,\n                transition: adaptiveHeightAnimation ? \"height 300ms ease-in-out\" : void 0,\n                willChange: \"height\",\n                userSelect: \"none\"\n              }, style),\n              tabIndex: enableKeyboardControls ? 0 : -1,\n              onKeyDown: enableKeyboardControls ? onKeyDown : void 0,\n              ref: carouselRef,\n              onMouseUp,\n              onMouseDown,\n              onMouseMove,\n              onMouseLeave: onMouseUp,\n              onTouchStart,\n              onTouchEnd: handleDragEnd,\n              onTouchMove,\n              id: `${carouselId}-slider-frame`,\n              \"data-testid\": `${carouselId}-slider-frame`,\n              children: /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\n                SliderList,\n                {\n                  animationDistance,\n                  cellAlign,\n                  currentSlide,\n                  disableEdgeSwiping: props.disableEdgeSwiping,\n                  draggedOffset: preDragOffset.current - dragDistance,\n                  disableAnimation,\n                  easing: props.easing,\n                  edgeEasing: props.edgeEasing,\n                  isDragging,\n                  ref: setSliderListRef,\n                  scrollMode,\n                  animation,\n                  slideCount,\n                  slidesToScroll,\n                  slidesToShow,\n                  speed,\n                  slideWidth,\n                  wrapAround,\n                  setIsAnimating,\n                  children: [\n                    wrapAround ? renderSlides(\"prev-cloned\") : null,\n                    renderSlides(),\n                    wrapAround ? renderSlides(\"next-cloned\") : null\n                  ]\n                }\n              )\n            }\n          )\n        ]\n      }\n    );\n  }\n);\nCarousel.defaultProps = default_carousel_props_default;\nCarousel.displayName = \"Carousel\";\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/nuka-carousel/dist/index.mjs\n");

/***/ })

};
;